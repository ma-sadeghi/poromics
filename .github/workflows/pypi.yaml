# name: PyPI

# on:
#   push:
#     branches:
#       - "**"
#     tags:
#       - "v[0-9]+.[0-9]+.[0-9]+"
#   pull_request:

# env:
#   PUBLISH_TO_PYPI: true

# jobs:
#   pypi:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           fetch-tags: true

#       - uses: actions/setup-python@v5
#         with:
#           python-version-file: .python-version

#       - name: Install Dependencies
#         run: make install

#       - name: Build Wheel
#         run: make build

#       # This will only run on Tags
#       - name: Publish package
#         if: ${{ env.PUBLISH_TO_PYPI == 'true' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags')}}
#         uses: pypa/gh-action-pypi-publish@release/v1

name: PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (major/minor/patch)"
        required: true
        default: "patch"

jobs:
  deploy:
    name: Publish 🐍 📦 to PyPI
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.PAT }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "**/pyproject.toml"

      # Setting up Julia separately is not needed, but reduces CI time due to caching
      - uses: julia-actions/setup-julia@v2
        with:
          version: "1"

      - uses: julia-actions/cache@v2
      - name: Install Dependencies
        run: |
          make install

      - name: Ensure no mismatch between recent tag and new version
        run: |
          export TAG=$(git describe --tags --abbrev=0)
          export VERSION=v$(uv run hatch version)
          if [ "$TAG" != "$VERSION" ]; then
            echo "Tag $TAG does not match version $VERSION"
            exit 1
          fi

      - name: Bump up version
        run: |
          uv run hatch version ${{ github.event.inputs.version }}
          echo "VERSION=v$(uv run hatch version)" >> $GITHUB_ENV

      - name: Commit version bump + push tag
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Bump version to ${{ env.VERSION }}
          commit_author: GitHub Actions <actions@github.com>
          tagging_message: ${{ env.VERSION }}

      - name: Build and publish to PyPI 📦
        run: |
          export HATCH_INDEX_USER="__token__"
          export HATCH_INDEX_AUTH="${{ secrets.HATCH_INDEX_AUTH }}"
          uv run hatch build
          uv run hatch publish
